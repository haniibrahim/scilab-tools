function peaks = peakDetect(signal, threshold)
    // Returns the position of the peaks of a signal
    //
    // Calling Sequence
    // peaks = peakDetect(signal)
    // peaks = peakDetect(signal, threshold)
    //
    // Parameters
    // signal:    Nx1 or 1xN vector of values
    // threshold: 1x1 vector of the threshold value (noise floor) - OPTIONAL
    // peaks:     Nx1 vector of peak values
    //
    // Description
    // For an input vector (row or column) "signal" , the function return 
    // the position of the peaks of the signal.
    //
    // The ouput "peaks" is a row vector (size = number of peaks),
    // "peaks" = [] if no peak is found.
    //
    // Optional argument "threshold" eliminates the peaks under
    // the threshold value (noise floor), 
    // e.g. min(signal)+(max(signal)-min(signal))/25;
    //
    // Examples
    // signal = [ ..
    // 0.0019630207226119614,0.0019844844379985635,0.0020897847815957334, ..
    // 0.0018879060219591016,0.0022873897304456037,0.0018302153723679891, .. 
    // 0.00170811647176932,0.0013136172679727579,0.0016487941940855819, ..
    // 0.01225581543442918,0.0046075638253189203,0.004249990620747263,, ..
    // 0.0044321235508068772,0.0054562865702723323,0.0064661239041811222, ..
    // 0.0085720405882695472,0.013993030975338895,0.037009268497050031, ..
    // 0.04962051501864944,0.01427388074514626,0.0085398027067810304, ..
    // 0.0058808721207164235,0.0043364547949817246,0.0035494469278390009, ..
    // 0.0024180163238186228,0.0017853634567524044,0.0022248833103664916, ..
    // 0.0046340163207794615,0.0027623163694224509,0.0019750564174259109, ..
    // 0.002188247540341616,0.0018521959049208586,0.0017759051120744772, ..
    // 0.0016026765377420641,0.0015099731943577189,0.003292970401844693, ..
    // 0.0011205087723207495,0.0010953541740845497,0.0011124692239659608, ..
    // 0.0010001392366738111,0.0010591074797335199,0.00099993885977667403, ..
    // 0.00095786841513458259,0.0010363603642451734,0.0020399519060455423, ..
    // 0.00072431309309008282,0.00069583113839958547,0.00069180253270677077, ..
    // 0.00069298709597711053,0.00070288267890792158,0.00073745666783238298, ..
    // 0.00074484682513302123,0.00082922878756635425, ..
    // 0.0015798356622232636,0.00015936449714914924,0.000295276046770112, ..
    // 0.00042478665769032985,0.00043930854143921049,0.00041468523253903011, ..
    // 0.00034275937610653637,0.00032892708906428499,0.00023579352847185906, ..
    // 0.00032429346807303158,0.00074698292742602897,0.00058720337933327173, ..
    // 0.0005467809920770148,0.00048771372957630001,0.00050342910218292044, ..
    // 0.00049054454456783384,0.00051906585852140835,0.0006865399585224126, ..
    // 0.00035528314387676789,0.00034403089514851472,0.00036131173967537608, ..
    // 0.00036276606438602216,0.00031079867550805074,0.00034722301260395772, ..
    // 0.0003512104293595262,0.0003547273418800393,0.00038422471300348797,.. 
    // 0.00041961212425662304,0.0002546766350275657,0.0003115237021232098, ..
    // 0.00029420852788954047,0.00031330857816400467,0.00031013750009608291, ..
    // 0.00031233229736981022,0.00030405418272816219,0.00034633344768265114,.. 
    // 0.00045990240234166708,0.00047378128950631686,0.00030904013693165586,..
    // 0.00029746804771868751,0.00029397396904364914,0.00029322617826069928,.. 
    // 0.00027412165909272625,0.0002766670637346505,0.00023338712530533004, ..
    // 0.00025470376054419886,0.00027073354837682653,0.00025626635632380017,..
    // 0.00025167367714451185,0.00025446618953412615,0.00025149602422832072, ..
    // 0.00023813587726579923,0.00025425606336978491,0.00025253493792140542, ..
    // 0.00024419979711146056,0.00023951418447804159,0.00023644701020011536, ..
    // 0.00022386558699602957,0.00022671626654249046,0.00021491326930380523, ..
    // 0.00022387299323204865,0.00019063958494486182,0.00041818017448546398, ..
    // 0.00025411198948864934,0.00024243960905779579,0.00023634081192454651, ..
    // 0.00022688739249801648,0.00023004099810015863,0.00022461567718033939, ..
    // 0.00020931676533261559,0.00022412226241316676,0.00020573475378558111, ..
    // 0.00021519138128899139,0.0002110010695593983,0.0002082803192840075, ..
    // 0.00020453713009990342,0.00021213840730652166,0.00020929923070280783, ..
    // 0.00020108445568287316,0.00019903653091459423,0.00020411105409238358, ..
    // 0.00020203525439752964,0.00019653524378447342,0.00019809333109018296, ..
    // 0.00019538411782236525,0.00019584510323661676,0.00019322437324272864, ..
    // 0.00019363908636333741,0.00018864805422947375,0.00019301563447819348, ..
    // 0.00018972198493113511,0.00018474514501651057,0.00018302584118070077, ..
    // 0.00018145719055426127,0.00018125071879265348,0.00018448579388868888, ..
    // 0.00017861916722863072];
    //
    // threshold = min(signal)+(max(signal)-min(signal))/25; // noise floor
    // peaks = peakDetect(signal, threshold); // peak positions
    // disp(signal(peaks),"Peak values:"); // Peak values
    //
    // // Plot signal, peaks and threshold line with frequency scale
    // clf();
    // [r N] = size(signal);
    // x = 22050*(1:N)/N; // Frequency scale
    // plot(x,signal); // Plot signal
    // plot(x(peaks),signal(peaks),"r.");  // Plot peaks
    // plot(x, ones(1,N)*threshold, "k-."); // Plot threshold
    // disp(x(peaks), "Peaks: ") // Lists  peak frequency-values
    //
    // See also
    // findExtremeVal
    // findInflecPts
    //
    // Authors
    //  Hani Ibrahim ; hani.ibrahim@gmx.de based on peak_detect from
    //  Jean-Luc Goudier
    
    // Check args
    [lhs,rhs]=argn();
    apifun_checkrhs("peakDetect", rhs, 1:2); // Input args
    apifun_checklhs("peakDetect", lhs, 1); // Output arg
    apifun_checkvector("peakDetect", signal, "signal", 1); 
    
    // Check for row vector and convert column vector if neccessary
    [r c] = size(signal);
    if r > 1 then
        signal = signal'; // convert column vector to row vector
        [r c] = size(signal); // determine new column number
    end
    
 
    // Set threshold to minimal value if not committed
    if rhs==2 then
        apifun_checktype("peakDetect", threshold, "threshold", 1, "constant");
        ts=threshold;
    end
    if rhs==1 then 
        ts=min(signal);
    end
    
    Lg=c-1; 
    d_s=diff(signal); 
    dd_s=[d_s(1),d_s(1,:)];               // diff first shift
    d_s=[d_s(1,:),d_s(Lg)];               // diff size correction
    ddd_s=[dd_s(1),dd_s(1,1:Lg)];         // diff second shift
    Z=d_s.*dd_s;                          // diff zeros

    peaks=find(((Z<0 & d_s<0)|(Z==0 & d_s<0 & ddd_s>0)) & signal>ts);
        
endfunction
